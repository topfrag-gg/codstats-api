// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "./node_modules/.prisma/client"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                       Int       @id @default(autoincrement())
  email                    String    @unique
  password                 String
  profile                  Profile?  @relation(name: "UserProfile")
  isVerified               Boolean   @default(false)
  isActive                 Boolean   @default(false)
  verificationToken        String?
  verificationTokenExpiry  DateTime?
  passwordResetToken       String?
  passwordResetTokenExpiry DateTime?
  createdAt                DateTime  @default(now())
  updatedAt                DateTime  @updatedAt
  deletedAt                DateTime?

  @@index([email])
}

model Profile {
  id           Int       @id @default(autoincrement())
  firstName    String
  lastName     String
  username     String?
  profileImage String?
  User         User      @relation(name: "UserProfile", fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  userId       Int       @unique
  createdAt    DateTime  @default(now())
  updatedAt    DateTime  @updatedAt
  deletedAt    DateTime?

  @@index([userId])
}

model Player {
  id                 Int                  @id @default(autoincrement())
  firstName          String
  lastName           String
  gamertag           String               @unique
  playerImage        String?
  team               Team?                @relation(fields: [teamId], references: [id])
  role               PlayerRole
  teamId             Int?
  stats              Stat[]
  leaderboard        Leaderboard?
  createdAt          DateTime             @default(now())
  updatedAt          DateTime             @updatedAt
  deletedAt          DateTime?
  MatchMapPlayerStat MatchMapPlayerStat[]

  @@index([id, gamertag])
}

enum PlayerRole {
  ENTRY_SMG
  ROAMING_SMG
  MAIN_AR
  FLEX
}

model Team {
  id            Int                  @id @default(autoincrement())
  name          String               @unique
  logo          String?
  players       Player[]
  teamA_Matches Match[]              @relation("TeamA")
  teamB_Matches Match[]              @relation("TeamB")
  matchesWon    Match[]              @relation("MatchWinner")
  MatchMap      MatchMap[]
  matchMapStats MatchMapPlayerStat[]
  createdAt     DateTime             @default(now())
  updatedAt     DateTime             @updatedAt
  deletedAt     DateTime?
}

model Match {
  id        String     @id @default(cuid())
  eventId   String?
  event     Event?     @relation(fields: [eventId], references: [id])
  teamAId   Int
  teamBId   Int
  teamA     Team       @relation("TeamA", fields: [teamAId], references: [id])
  teamB     Team       @relation("TeamB", fields: [teamBId], references: [id])
  winnerId  Int?
  winner    Team?      @relation("MatchWinner", fields: [winnerId], references: [id])
  date      DateTime
  stats     Stat[]
  MatchMap  MatchMap[]
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt

  @@index([id])
}

model Event {
  id        String   @id @default(cuid())
  name      String
  startDate DateTime
  endDate   DateTime
  matches   Match[]
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([id, name])
}

model Stat {
  id         String   @id @default(cuid())
  playerId   Int
  player     Player   @relation(fields: [playerId], references: [id])
  matchMapId String
  matchMap   MatchMap @relation(fields: [matchMapId], references: [id])
  kills      Int
  deaths     Int
  assists    Int
  damage     Int
  objective  Int
  score      Int
  Match      Match?   @relation(fields: [matchId], references: [id])
  matchId    String?
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  @@index([playerId, matchMapId])
}

model Leaderboard {
  id        String   @id @default(cuid())
  playerId  Int      @unique
  player    Player   @relation(fields: [playerId], references: [id])
  rank      Int
  score     Int
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([id])
}

model GameMode {
  id        Int        @id @default(autoincrement())
  name      String     @unique // e.g., "Hardpoint", "Search and Destroy", "Control"
  maps      Map[]
  MatchMap  MatchMap[]
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt

  @@index([id])
}

model Map {
  id         Int        @id @default(autoincrement())
  name       String     @unique
  gameModeId Int
  gameMode   GameMode   @relation(fields: [gameModeId], references: [id])
  matchMaps  MatchMap[]
  createdAt  DateTime   @default(now())
  updatedAt  DateTime   @updatedAt

  @@index([gameModeId])
}

model MatchMap {
  id                 String               @id @default(cuid())
  matchId            String
  match              Match                @relation(fields: [matchId], references: [id])
  mapId              Int
  map                Map                  @relation(fields: [mapId], references: [id])
  gameModeId         Int
  gameMode           GameMode             @relation(fields: [gameModeId], references: [id])
  mapNumber          Int
  winnerId           Int?
  winner             Team?                @relation(fields: [winnerId], references: [id])
  stats              Stat[]
  createdAt          DateTime             @default(now())
  updatedAt          DateTime             @updatedAt
  MatchMapPlayerStat MatchMapPlayerStat[]

  @@unique([matchId, mapNumber])
  @@index([matchId])
}

model MatchMapPlayerStat {
  id         String   @id @default(cuid())
  matchMapId String
  playerId   Int
  kills      Int
  deaths     Int
  assists    Int
  damage     Int
  objective  Int
  score      Int
  matchMap   MatchMap @relation(fields: [matchMapId], references: [id])
  player     Player   @relation(fields: [playerId], references: [id])
  Team       Team?    @relation(fields: [teamId], references: [id])
  teamId     Int?
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  @@unique([matchMapId, playerId])
}
